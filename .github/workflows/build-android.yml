name: Build TerlineT Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite executar manualmente

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 horas limite
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: ☕ Configurar Java JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 📦 Cache buildozer completo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.buildozer
            ~/.gradle
          key: ${{ runner.os }}-buildozer-full-${{ hashFiles('buildozer.spec', 'requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-buildozer-full-
            ${{ runner.os }}-buildozer-

      - name: 🔧 Atualizar sistema e instalar dependências base
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            git \
            unzip \
            python3-dev \
            python3-setuptools \
            python3-wheel \
            openjdk-17-jdk \
            autoconf \
            libtool \
            pkg-config \
            zlib1g-dev \
            libncurses5-dev \
            libncursesw5-dev \
            libtinfo5 \
            cmake \
            libffi-dev \
            libssl-dev \
            automake \
            gettext \
            libltdl-dev

      - name: 📱 Instalar dependências SDL2 e multimedia
        run: |
          sudo apt-get install -y --no-install-recommends \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libportmidi-dev \
            libswscale-dev \
            libavformat-dev \
            libavcodec-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            ffmpeg

      - name: 🐍 Configurar pip e instalar dependências Python
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --upgrade \
            buildozer==1.5.0 \
            cython==0.29.36 \
            virtualenv \
            sh \
            colorama \
            appdirs \
            pexpect==4.8.0 \
            jinja2

      - name: 🔧 Configurar Android SDK manualmente
        run: |
          export ANDROID_HOME="$HOME/.buildozer/android/platform/android-sdk"
          export ANDROID_SDK_ROOT="$ANDROID_HOME"
          
          # Criar diretórios
          mkdir -p "$ANDROID_HOME/cmdline-tools"
          
          # Baixar command line tools
          cd "$ANDROID_HOME"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          mv cmdline-tools latest
          mv latest cmdline-tools/
          rm commandlinetools-linux-9477386_latest.zip
          
          # Configurar PATH
          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
          
          # Aceitar licenças
          yes | sdkmanager --licenses || true
          
          # Instalar componentes necessários
          sdkmanager "platforms;android-33" "build-tools;33.0.2" "ndk;25.2.9519653" "platform-tools"
          
          # Definir variáveis para próximos steps
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: 🔍 Verificar configuração
        run: |
          echo "🔍 Verificando ambiente:"
          python --version
          java -version
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          ls -la ~/.buildozer/android/platform/ || echo "Buildozer ainda não inicializado"

      - name: 🏗️ Inicializar buildozer
        run: |
          echo "📋 Inicializando buildozer..."
          buildozer android debug --verbose || echo "Primeira tentativa falhou, continuando..."

      - name: 🔄 Segunda tentativa de build (se necessário)
        if: always()
        run: |
          echo "🔄 Segunda tentativa de build..."
          buildozer android debug --verbose

      - name: 📂 Localizar APK gerado
        run: |
          echo "🔍 Procurando arquivos APK..."
          find . -name "*.apk" -type f -exec ls -la {} \;
          
          # Criar diretório APK e mover arquivos
          mkdir -p APK
          find . -name "*.apk" -type f -exec cp {} APK/ \;
          ls -la APK/ || echo "Nenhum APK encontrado"

      - name: 📱 Upload APK como artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terlinet-debug-apk
          path: |
            APK/*.apk
            bin/*.apk
            **/*.apk
          retention-days: 30
          if-no-files-found: warn

      - name: 🎉 Status final
        if: always()
        run: |
          if [ -f APK/*.apk ]; then
            echo "✅ Build concluído com sucesso!"
            echo "📱 APK disponível nos artifacts"
          else
            echo "❌ Build falhou - verifique os logs acima"
            exit 1
          fi

      - name: 💾 Criar Release (se for push para main/master)
        if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: TerlineT Android v${{ github.run_number }}
          body: |
            🤖 Build automático do TerlineT Android
            
            📱 **APK de Debug incluído**
            🔧 Build #${{ github.run_number }}
            📅 ${{ github.event.head_commit.timestamp }}
            
            ## 🚀 Como usar:
            1. Baixe o APK
            2. Instale no seu Android
            3. Coloque o modelo GGUF em `/storage/emulated/0/TerlineT/modelo/`
            
            ## 📋 Recursos:
            - ✅ Interface otimizada para Android
            - ✅ Suporte a modelo GGUF
            - ✅ Reconhecimento de voz (simulado)
            - ✅ Síntese de voz (simulada)
          files: APK/*.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
